## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Athenz ZMS image version
## ref: https://hub.docker.com/r/wzyahoo/athenz-zms-server/tags
##
image:
  registry: docker.io
  repository: wzyahoo/athenz-zms-server
  tag: latest
  setup:
    repository: wzyahoo/athenz-setup-env
    tag: latest
  mysql:
    repository: mariadb
    tag: '10.5.2'
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName
  ## Set to true if you would like to see extra information on logs
  ##

## Set up update strategy for wordpress installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods is destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
updateStrategy:
  type: RollingUpdate

replicaCount: 1

password:
  jdbc: "athenz_admin"
  jdbcRo: "athenz_admin"
  # keystore: ""
  # truststore: ""
files:
  zmsKey: "files/secrets/zms/private.pem"
  tls:
    crt: "files/secrets/tls/zms_cert.pem"
    key: "files/secrets/tls/zms_key.pem"
    ca:
      - "files/secrets/tls/CAs/athenz_ca.pem"
      - "files/secrets/tls/CAs/service_ca.pem"
      - "files/secrets/tls/CAs/user_ca.pem"
  conf: "files/conf/*"

## keys: private.pem (.files.zmsKey), keystore, truststore, jdbc (.password.jdbc), jdbcRo (.password.jdbcRo)
existingSecret: "wzzms-athenz-zms-2"
# .files.tls.crt and .files.tls.key
# existingTLSSecret: "wzzms-athenz-zms-tls-2"
# .files.tls.ca
# existingTLSCASecret: "wzzms-athenz-zms-tls-ca-2"

# overwrite existingTLSSecret and existingTLSCASecret
# keys: zms_keystore.pkcs12, zms_truststore.jks
existingTLSStoreSecret: "wzzms-athenz-zms-tls-store-2"

service:
  annotations: {}
  port: 4443
  ## Kubernetes service type, ClusterIP and NodePort are supported at present
  type: ClusterIP
  # clusterIp: xx.xx.xx.xx
  # type: NodePort
  # nodePort: 4443

## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## Pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Node labels for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment. Evaluated as a template.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: {}

## K8s Security Context for ZMS pods
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 10001

## ZMS pod liveness probes options
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## ZMS containers' resource requests and limits (default: for alpha env.)
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits: {}
  requests:
    memory: 4096Mi
    cpu: 500m

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  # storageClass: "-"
  # existingClaim: your-claim
  accessMode: ReadWriteOnce
  size: 4Gi

# run after default init. containers
extraInitContainers: |
  - name: tls-echo
    image: {{ template "athenz-zms.setup.image" . }}
    imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
    env:
      - name: ZMS_KEYSTORE_PATH
        value: /opt/athenz/zms/var/certs/zms_keystore.pkcs12
      - name: ZMS_KEYSTORE_PASS
        valueFrom:
          secretKeyRef:
            name: {{ template "athenz-zms.secretName" . }}
            key: keystore
      - name: ZMS_TRUSTSTORE_PATH
        value: /opt/athenz/zms/var/certs/zms_truststore.jks
      - name: ZMS_TRUSTSTORE_PASS
        valueFrom:
          secretKeyRef:
            name: {{ template "athenz-zms.secretName" . }}
            key: truststore
    command:
      - "/bin/sh"
      - "-c"
      - >-
        keytool -list -storepass "${ZMS_KEYSTORE_PASS}" -keystore "${ZMS_KEYSTORE_PATH}"; keytool -list -storepass "${ZMS_TRUSTSTORE_PASS}" -keystore "${ZMS_TRUSTSTORE_PATH}"
    volumeMounts:
      - name: tls-stores
        mountPath: /opt/athenz/zms/var/certs

# sidecarContainers: |

ingress-nginx:
  controller:
    service:
      externalIPs:
        - 172.21.97.103
  # your service port should have the same value with the ingress
  tcp:
    "4443": "{{- printf \"%s/%s\" .Release.Namespace (include \"athenz-zms.fullname\" .) -}}:4443"
